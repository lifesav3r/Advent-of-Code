}
if(any(numCharList == 3)){
SEVEN <- unique(unlist(strsplit(codeList[which(numCharList == 3)], "")))
if(!is.na(display[[3]][[1]])){
display[[1]] <- SEVEN[!SEVEN %in% ONE]
} else{
display[[1]] <- display[[3]] <- display[[6]] <- ONE
}
}
if(any(numCharList == 4)){
FOUR <- unique(unlist(strsplit(codeList[which(numCharList == 4)], "")))
if(!is.na(display[[3]][[1]])){
display[[2]] <- display[[4]] <- FOUR[!FOUR %in% display[[3]]]
} else{
display[[2]] <- display[[4]] <- display[[3]] <- display[[6]] <- FOUR
}
}
if(any(numCharList == 6)){
check069 <- strsplit(codeList[which(numCharList == 6)], "")
check09 <- sapply(check069, function(y) all(display[[3]] %in% y))
check69 <- sapply(check069, function(y) all(display[[4]] %in% y))
if(any(!check09)){
SIX <- check069[!check09][[1]]
display[[3]] <- letters[1:7][!letters[1:7] %in% SIX]
display[[6]] <- display[[6]][!display[[6]] %in% display[[3]]]
}
if(any(!check69)){
ZERO <- check069[!check69][[1]]
display[[4]] <- letters[1:7][!letters[1:7] %in% ZERO]
display[[2]] <- display[[2]][!display[[2]] %in% display[[4]]]
}
}
output[numCharOutput == 2] <- 1
output[numCharOutput == 3] <- 7
output[numCharOutput == 4] <- 4
output[numCharOutput == 7] <- 8
if(length(display[[3]]) == 1){
output[numCharOutput == 6 & !grepl(display[[3]], codeOutput)] <- 6
}
if(length(display[[4]]) == 1){
output[numCharOutput == 6 & !grepl(display[[4]], codeOutput)] <- 0
}
output[numCharOutput == 6 & !output %in% c(0,6)] <- 9
if(length(display[[3]]) == 1){
output[numCharOutput == 5 & !grepl(display[[6]], codeOutput)] <- 2
output[numCharOutput == 5 & grepl(display[[3]],codeOutput) & grepl(display[[6]], codeOutput)] <- 3
output[numCharOutput == 5 & !grepl(display[[3]], codeOutput)] <- 5
} else{
output[numCharOutput == 5 & sapply(codeOutput, function(y) sum(display[[3]] %in% el(strsplit(y,"")))) == 2] <- 3
if(length(display[[2]]) == 1){
output[numCharOutput == 5 & output != 3 & !grepl(display[[2]], codeOutput)] <- 2
}else{
output[numCharOutput == 5 & output != 3 & sapply(codeOutput, function(y) sum(display[[2]] %in% el(strsplit(y,"")))) == 1] <- 2
}
output[numCharOutput == 5 & !output %in% c(2,3)] <- 5
}
outputAll[i] <- paste(output, collapse = "")
}
sum(as.integer(outputAll))
}
segDisplay2(test)
segDisplay2(data)
test <- data.matrix(read.fwf("~/Documents/GitHub/Advent-of-Code/2021/Day 9 - Smoke Basin/test.txt", widths = rep(1,10)));
View(test)
data <- data.matrix(read.fwf("~/Documents/GitHub/Advent-of-Code/2021/Day 9 - Smoke Basin/data.txt", widths = rep(1,100)));
View(data)
?&&
??&&
riskLevel <- function(x){
totalRisk <- 0
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
curVal <- x[[i,j]]
if( (i <= 1 || curVal < x[[i - 1, j]]) &&
(j <= 1 || curVal < x[[i, j - 1]]) &&
(i >= nrow(x) || curVal < x[[i + 1, j]]) &&
(j >= ncol(x) || curVal < x[[i, j + 1]])){
totalRisk <- totalRisk + curVal + 1
}
}
}
totalRisk
}
riskLevel(test)
riskLevel(data)
?floodfill
??floodfill
basinFinder <- function(x,y,z){
if(x[[y,z]] == 9){
return(0)
}
x[[y,z]] <<- 9
n <- 1
if(y > 1){
n <- n + basinFinder(y - 1, z)
}
if(z > 1){
n <- n + basinFinder(y, z - 1)
}
if(y < nrow(x)){
n <- n + basinFinder(y + 1, z)
}
if(z < ncol(x)){
n <- n + basinFinder(y, z + 1)
}
}
basinSize <- function(x){
basins <- c()
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
n <- basinFinder(x,i,j)
if(n > 0){
basins <- c(basins, n)
}
}
}
prod(head(sort(basins, decreasing = TRUE), 3))
}
basinSize(test)
basinFinder <- function(x,y,z){
if(x[[y,z]] == 9){
return(0)
}
test[[y,z]] <<- 9
n <- 1
if(y > 1){
n <- n + basinFinder(y - 1, z)
}
if(z > 1){
n <- n + basinFinder(y, z - 1)
}
if(y < nrow(x)){
n <- n + basinFinder(y + 1, z)
}
if(z < ncol(x)){
n <- n + basinFinder(y, z + 1)
}
}
basinSize <- function(x){
basins <- c()
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
n <- basinFinder(x,i,j)
if(n > 0){
basins <- c(basins, n)
}
}
}
prod(head(sort(basins, decreasing = TRUE), 3))
}
basinSize(test)
basinFinder <- function(x,y,z){
if(x[y,z] == 9){
return(0)
}
test[[y,z]] <<- 9
n <- 1
if(y > 1){
n <- n + basinFinder(y - 1, z)
}
if(z > 1){
n <- n + basinFinder(y, z - 1)
}
if(y < nrow(x)){
n <- n + basinFinder(y + 1, z)
}
if(z < ncol(x)){
n <- n + basinFinder(y, z + 1)
}
}
basinSize(test)
basinFinder <- function(x,y,z){
if(x[y,z] == 9){
return(0)
}
test[y,z] <<- 9
n <- 1
if(y > 1){
n <- n + basinFinder(y - 1, z)
}
if(z > 1){
n <- n + basinFinder(y, z - 1)
}
if(y < nrow(x)){
n <- n + basinFinder(y + 1, z)
}
if(z < ncol(x)){
n <- n + basinFinder(y, z + 1)
}
}
basinSize(test)
test
basinFinder <- function(x,y,z){
if(x[y,z] == 9){
return(0)
}
test[y,z] <<- 9
n <- 1
if(y > 1){
n <- n + basinFinder(y - 1, z)
}
if(z > 1){
n <- n + basinFinder(y, z - 1)
}
if(y < nrow(x)){
n <- n + basinFinder(y + 1, z)
}
if(z < ncol(x)){
n <- n + basinFinder(y, z + 1)
}
}
basinSize(test)
basinFinder <- function(x,y,z){
if(x[y,z] == 9){
return(0)
}
test[y,z] <<- 9
n <- 1
if(y > 1){
n <- n + basinFinder(x, y - 1, z)
}
if(z > 1){
n <- n + basinFinder(x, y, z - 1)
}
if(y < nrow(x)){
n <- n + basinFinder(x, y + 1, z)
}
if(z < ncol(x)){
n <- n + basinFinder(x, y, z + 1)
}
}
basinSize(test)
test
test <- data.matrix(read.fwf("~/Documents/GitHub/Advent-of-Code/2021/Day 9 - Smoke Basin/test.txt", widths = rep(1,10)));
test
basinSize(test)
basinFinder <- function(x,y){
if(test[[x,y]] == 9){
return(0)
}
test[x,y] <<- 9
n <- 1
if(x > 1){
n <- n + basinFinder(x - 1, y)
}
if(y > 1){
n <- n + basinFinder(x, y - 1)
}
if(x < nrow(test)){
n <- n + basinFinder(x + 1, y)
}
if(y < ncol(test)){
n <- n + basinFinder(x, y + 1)
}
}
basinSize <- function(x){
basins <- c()
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
n <- basinFinder(x,i,j)
if(n > 0){
basins <- c(basins, n)
}
}
}
prod(head(sort(basins, decreasing = TRUE), 3))
}
test <- data.matrix(read.fwf("~/Documents/GitHub/Advent-of-Code/2021/Day 9 - Smoke Basin/test.txt", widths = rep(1,10)));
basinSize(test)
basinFinder <- function(x,y){
if(test[[x,y]] == 9){
return(0)
}
test[x,y] <<- 9
n <- 1
if(x > 1){
n <- n + basinFinder(x - 1, y)
}
if(y > 1){
n <- n + basinFinder(x, y - 1)
}
if(x < nrow(test)){
n <- n + basinFinder(x + 1, y)
}
if(y < ncol(test)){
n <- n + basinFinder(x, y + 1)
}
}
basinSize <- function(x){
basins <- c()
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
n <- basinFinder(i,j)
if(n > 0){
basins <- c(basins, n)
}
}
}
prod(head(sort(basins, decreasing = TRUE), 3))
}
basinSize(test)
basins <- c()
for(i in 1:nrow(test)){
for(j in 1:ncol(test)){
n <- basinFinder(i,j)
if(n > 0){
basins <- c(basins, n)
}
}
}
prod(head(sort(basins, decreasing = TRUE), 3))
test <- data.matrix(read.fwf("~/Documents/GitHub/Advent-of-Code/2021/Day 9 - Smoke Basin/test.txt", widths = rep(1,10)));
basins <- c()
for(i in 1:nrow(test)){
for(j in 1:ncol(test)){
n <- basinFinder(i,j)
if(n > 0){
basins <- c(basins, n)
}
}
}
prod(head(sort(basins, decreasing = TRUE), 3))
basins <- c()
for(i in 1:nrow(test)){
for(j in 1:ncol(test)){
n <- basinFinder(i,j)
if(n > 0){
basins <- c(basins, n)
}
}
}
prod(head(sort(basins, decreasing = TRUE), 3))
basinFinder <- function(x,y){
if(test[[x,y]] == 9){
return(0)
}
test[x,y] <<- 9
n <- 1
if(x > 1){
n <- n + basinFinder(x - 1, y)
}
if(y > 1){
n <- n + basinFinder(x, y - 1)
}
if(x < nrow(test)){
n <- n + basinFinder(x + 1, y)
}
if(y < ncol(test)){
n <- n + basinFinder(x, y + 1)
}
return(n)
}
basins <- c()
for(i in 1:nrow(test)){
for(j in 1:ncol(test)){
n <- basinFinder(i,j)
if(n > 0){
basins <- c(basins, n)
}
}
}
prod(head(sort(basins, decreasing = TRUE), 3))
test <- data.matrix(read.fwf("~/Documents/GitHub/Advent-of-Code/2021/Day 9 - Smoke Basin/test.txt", widths = rep(1,10)));
basins <- c()
for(i in 1:nrow(test)){
for(j in 1:ncol(test)){
n <- basinFinder(i,j)
if(n > 0){
basins <- c(basins, n)
}
}
}
prod(head(sort(basins, decreasing = TRUE), 3))
basinFinder <- function(x,y){
if(input[[x,y]] == 9){
return(0)
}
input[x,y] <- 9
n <- 1
if(x > 1){
n <- n + basinFinder(x - 1, y)
}
if(y > 1){
n <- n + basinFinder(x, y - 1)
}
if(x < nrow(test)){
n <- n + basinFinder(x + 1, y)
}
if(y < ncol(test)){
n <- n + basinFinder(x, y + 1)
}
return(n)
}
basinSize <- function(input){
basins <- c()
for(i in 1:nrow(input)){
for(j in 1:ncol(input)){
n <- basinFinder(i,j)
if(n > 0){
basins <- c(basins, n)
}
}
}
prod(head(sort(basins, decreasing = TRUE), 3))
}
basinSize(test)
basinFinder <- function(x,y){
if(test[[x,y]] == 9){
return(0)
}
test[x,y] <<- 9
n <- 1
if(x > 1){
n <- n + basinFinder(x - 1, y)
}
if(y > 1){
n <- n + basinFinder(x, y - 1)
}
if(x < nrow(test)){
n <- n + basinFinder(x + 1, y)
}
if(y < ncol(test)){
n <- n + basinFinder(x, y + 1)
}
return(n)
}
basinSize(test)
test <- data.matrix(read.fwf("~/Documents/GitHub/Advent-of-Code/2021/Day 9 - Smoke Basin/test.txt", widths = rep(1,10)));
basinSize(test)
basinSize(data)
data <- data.matrix(read.fwf("~/Documents/GitHub/Advent-of-Code/2021/Day 9 - Smoke Basin/data.txt", widths = rep(1,100)));
basinFinder <- function(x,y){
if(data[[x,y]] == 9){
return(0)
}
data[x,y] <<- 9
n <- 1
if(x > 1){
n <- n + basinFinder(x - 1, y)
}
if(y > 1){
n <- n + basinFinder(x, y - 1)
}
if(x < nrow(test)){
n <- n + basinFinder(x + 1, y)
}
if(y < ncol(test)){
n <- n + basinFinder(x, y + 1)
}
return(n)
}
basinSize <- function(input){
basins <- c()
for(i in 1:nrow(input)){
for(j in 1:ncol(input)){
n <- basinFinder(i,j)
if(n > 0){
basins <- c(basins, n)
}
}
}
prod(head(sort(basins, decreasing = TRUE), 3))
}
basinSize(data)
data <- data.matrix(read.fwf("~/Documents/GitHub/Advent-of-Code/2021/Day 9 - Smoke Basin/data.txt", widths = rep(1,100)));
basinSize(data)
test <- data.matrix(read.fwf("~/Documents/GitHub/Advent-of-Code/2021/Day 9 - Smoke Basin/test.txt", widths = rep(1,10)));
data <- data.matrix(read.fwf("~/Documents/GitHub/Advent-of-Code/2021/Day 9 - Smoke Basin/data.txt", widths = rep(1,100)));
basins <- c()
for(i in 1:nrow(data)){
for(j in 1:ncol(data)){
n <- basinFinder(i,j)
if(n > 0){
basins <- c(basins, n)
}
}
}
prod(head(sort(basins, decreasing = TRUE), 3))
basinFinder <- function(x,y){
if(data[[x,y]] == 9){
return(0)
}
data[x,y] <<- 9
n <- 1
if(x > 1){
n <- n + basinFinder(x - 1, y)
}
if(y > 1){
n <- n + basinFinder(x, y - 1)
}
if(x < nrow(data)){
n <- n + basinFinder(x + 1, y)
}
if(y < ncol(data)){
n <- n + basinFinder(x, y + 1)
}
return(n)
}
basinSize <- function(input){
basins <- c()
for(i in 1:nrow(input)){
for(j in 1:ncol(input)){
n <- basinFinder(i,j)
if(n > 0){
basins <- c(basins, n)
}
}
}
prod(head(sort(basins, decreasing = TRUE), 3))
}
data <- data.matrix(read.fwf("~/Documents/GitHub/Advent-of-Code/2021/Day 9 - Smoke Basin/data.txt", widths = rep(1,100)));
basinSize(data)
