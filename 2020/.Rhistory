corrField[(i + 1):length(corrField)] <- lapply(corrField[(i + 1):length(corrField)], function(a) setdiff(a, corrField[[i]]))
}
dep <- grep("departure",names(corrField))
ticketVal <- prod(as.integer(str_split(myTicket,",")[[1]])[unlist(corrField[dep])])
return(ticketVal)
}
checkValid(test)
test <- readLines("test.txt");
checkValid(test)
checkValid <- function(x){
myTicket <- x[(which(grepl("^your ticket", x)) + 1):length(x)]
nearbyTickets <- str_split_fixed(x[(which(grepl("^nearby", x)) + 1):length(x)], ",", Inf)
mode(nearbyTickets) <- "integer"
fields <- x[1:(which(grepl("^your ticket", x)) - 2)]
fields <- str_match_all(fields, "^([a-z ]+): (\\d+)-(\\d+) or (\\d+)-(\\d+)")
fields <- as.data.frame(t(sapply(fields, function(x) matrix(x[,-1], ncol = 5))))
fields[,2:5] <- lapply(fields[,2:5], as.integer)
names(fields) <- c("field","min1", "max1", "min2", "max2")
validList <- sapply(nearbyTickets, function(y) any((fields$min1 <= y & y <= fields$max1) | (fields$min2 <= y & y <= fields$max2)))
dim(validList) <- dim(nearbyTickets)
validList <- nearbyTickets[apply(validList,1,all),]
View(validList)
corrField <- apply(fields,1, function(cur)
which(
apply(matrix(between(validList,cur[2],cur[3]) | between(validList,cur[4],cur[5]),
nrow = nrow(validList),
ncol = ncol(validList)),
2, all)
)
)
names(corrField) <- fields$class
order <- names(sort(sapply(corrField, length)))
corrfield <- corrField[order]
for(i in 1:(length(corrField) - 1)){
corrField[(i + 1):length(corrField)] <- lapply(corrField[(i + 1):length(corrField)], function(a) setdiff(a, corrField[[i]]))
}
dep <- grep("departure",names(corrField))
ticketVal <- prod(as.integer(str_split(myTicket,",")[[1]])[unlist(corrField[dep])])
return(ticketVal)
}
checkValid(test)
checkValid <- function(x){
myTicket <- x[(which(grepl("^your ticket", x)) + 1):length(x)]
nearbyTickets <- str_split_fixed(x[(which(grepl("^nearby", x)) + 1):length(x)], ",", Inf)
mode(nearbyTickets) <- "integer"
fields <- x[1:(which(grepl("^your ticket", x)) - 2)]
fields <- str_match_all(fields, "^([a-z ]+): (\\d+)-(\\d+) or (\\d+)-(\\d+)")
fields <- as.data.frame(t(sapply(fields, function(x) matrix(x[,-1], ncol = 5))))
fields[,2:5] <- lapply(fields[,2:5], as.integer)
names(fields) <- c("field","min1", "max1", "min2", "max2")
validList <- sapply(nearbyTickets, function(y) any((fields$min1 <= y & y <= fields$max1) | (fields$min2 <= y & y <= fields$max2)))
dim(validList) <- dim(nearbyTickets)
validList <- nearbyTickets[apply(validList,1,all),]
corrField <- apply(fields,1, function(cur)
which(
apply(matrix(between(validList,cur[2],cur[3]) | between(validList,cur[4],cur[5]),
nrow = nrow(validList),
ncol = ncol(validList)),
2, all)
)
)
names(corrField) <- fields$class
order <- names(sort(sapply(corrField, length)))
corrfield <- corrField[order]
for(i in 1:(length(corrField) - 1)){
corrField[(i + 1):length(corrField)] <- lapply(corrField[(i + 1):length(corrField)], function(a) setdiff(a, corrField[[i]]))
}
dep <- grep("departure",names(corrField))
ticketVal <- prod(as.integer(str_split(myTicket,",")[[1]])[unlist(corrField[dep])])
return(ticketVal)
}
checkValid(test)
checkValid <- function(x){
myTicket <- x[(which(grepl("^your ticket", x)) + 1):length(x)]
nearbyTickets <- str_split_fixed(x[(which(grepl("^nearby", x)) + 1):length(x)], ",", Inf)
mode(nearbyTickets) <- "integer"
fields <- x[1:(which(grepl("^your ticket", x)) - 2)]
fields <- str_match_all(fields, "^([a-z ]+): (\\d+)-(\\d+) or (\\d+)-(\\d+)")
fields <- as.data.frame(t(sapply(fields, function(x) matrix(x[,-1], ncol = 5))))
fields[,2:5] <- lapply(fields[,2:5], as.integer)
names(fields) <- c("field","min1", "max1", "min2", "max2")
validList <- sapply(nearbyTickets, function(y) any((fields$min1 <= y & y <= fields$max1) | (fields$min2 <= y & y <= fields$max2)))
dim(validList) <- dim(nearbyTickets)
validList <- nearbyTickets[apply(validList,1,all),]
corrField <- apply(fields,1, function(cur)
which(
apply(matrix(between(validList,cur[2],cur[3]) | between(validList,cur[4],cur[5]),
nrow = nrow(validList),
ncol = ncol(validList)),
2, all)
)
)
names(corrField) <- fields$class
View(corrField)
order <- names(sort(sapply(corrField, length)))
corrfield <- corrField[order]
for(i in 1:(length(corrField) - 1)){
corrField[(i + 1):length(corrField)] <- lapply(corrField[(i + 1):length(corrField)], function(a) setdiff(a, corrField[[i]]))
}
dep <- grep("departure",names(corrField))
ticketVal <- prod(as.integer(str_split(myTicket,",")[[1]])[unlist(corrField[dep])])
return(ticketVal)
}
checkValid(test)
checkValid <- function(x){
myTicket <- x[(which(grepl("^your ticket", x)) + 1):length(x)]
nearbyTickets <- str_split_fixed(x[(which(grepl("^nearby", x)) + 1):length(x)], ",", Inf)
mode(nearbyTickets) <- "integer"
fields <- x[1:(which(grepl("^your ticket", x)) - 2)]
fields <- str_match_all(fields, "^([a-z ]+): (\\d+)-(\\d+) or (\\d+)-(\\d+)")
fields <- as.data.frame(t(sapply(fields, function(x) matrix(x[,-1], ncol = 5))))
fields[,2:5] <- lapply(fields[,2:5], as.integer)
names(fields) <- c("field","min1", "max1", "min2", "max2")
validList <- sapply(nearbyTickets, function(y) any((fields$min1 <= y & y <= fields$max1) | (fields$min2 <= y & y <= fields$max2)))
dim(validList) <- dim(nearbyTickets)
validList <- nearbyTickets[apply(validList,1,all),]
corrField <- apply(fields,1, function(cur)
which(
apply(matrix(between(validList,cur[2],cur[3]) | between(validList,cur[4],cur[5]),
nrow = nrow(validList),
ncol = ncol(validList)),
2, all)
)
)
names(corrField) <- fields$class
order <- names(sort(sapply(corrField, length)))
corrfield <- corrField[order]
for(i in 1:(length(corrField) - 1)){
corrField[(i + 1):length(corrField)] <- lapply(corrField[(i + 1):length(corrField)], function(a) setdiff(a, corrField[[i]]))
}
View(corrField)
dep <- grep("departure",names(corrField))
ticketVal <- prod(as.integer(str_split(myTicket,",")[[1]])[unlist(corrField[dep])])
return(ticketVal)
}
checkValid(test)
checkValid <- function(x){
myTicket <- x[(which(grepl("^your ticket", x)) + 1):length(x)]
nearbyTickets <- str_split_fixed(x[(which(grepl("^nearby", x)) + 1):length(x)], ",", Inf)
mode(nearbyTickets) <- "integer"
fields <- x[1:(which(grepl("^your ticket", x)) - 2)]
fields <- str_match_all(fields, "^([a-z ]+): (\\d+)-(\\d+) or (\\d+)-(\\d+)")
fields <- as.data.frame(t(sapply(fields, function(x) matrix(x[,-1], ncol = 5))))
fields[,2:5] <- lapply(fields[,2:5], as.integer)
names(fields) <- c("field","min1", "max1", "min2", "max2")
validList <- sapply(nearbyTickets, function(y) any((fields$min1 <= y & y <= fields$max1) | (fields$min2 <= y & y <= fields$max2)))
dim(validList) <- dim(nearbyTickets)
validList <- nearbyTickets[apply(validList,1,all),]
corrField <- apply(fields,1, function(cur)
which(
apply(matrix(between(validList,cur[2],cur[3]) | between(validList,cur[4],cur[5]),
nrow = nrow(validList),
ncol = ncol(validList)),
2, all)
)
)
names(corrField) <- fields$class
order <- names(sort(sapply(corrField, length)))
corrfield <- corrField[order]
for(i in 1:(length(corrField) - 1)){
corrField[(i + 1):length(corrField)] <- lapply(corrField[(i + 1):length(corrField)], function(a) setdiff(a, corrField[[i]]))
}
View(corrField)
dep <- grep("departure",names(corrField))
ticketVal <- prod(as.integer(str_split(myTicket,",")[[1]])[unlist(corrField[dep])])
return(ticketVal)
}
checkValid(test)
corrField[[1]]
checkValid <- function(x){
myTicket <- x[(which(grepl("^your ticket", x)) + 1):length(x)]
nearbyTickets <- str_split_fixed(x[(which(grepl("^nearby", x)) + 1):length(x)], ",", Inf)
mode(nearbyTickets) <- "integer"
fields <- x[1:(which(grepl("^your ticket", x)) - 2)]
fields <- str_match_all(fields, "^([a-z ]+): (\\d+)-(\\d+) or (\\d+)-(\\d+)")
fields <- as.data.frame(t(sapply(fields, function(x) matrix(x[,-1], ncol = 5))))
fields[,2:5] <- lapply(fields[,2:5], as.integer)
names(fields) <- c("field","min1", "max1", "min2", "max2")
validList <- sapply(nearbyTickets, function(y) any((fields$min1 <= y & y <= fields$max1) | (fields$min2 <= y & y <= fields$max2)))
dim(validList) <- dim(nearbyTickets)
validList <- nearbyTickets[apply(validList,1,all),]
corrField <- apply(fields,1, function(cur)
which(
apply(matrix(between(validList,cur[2],cur[3]) | between(validList,cur[4],cur[5]),
nrow = nrow(validList),
ncol = ncol(validList)),
2, all)
)
)
names(corrField) <- fields$class
order <- names(sort(sapply(corrField, length)))
corrField <- corrField[order]
for(i in 1:(length(corrField)-1)){
corrField[(i+1):length(corrField)] <- lapply(corrField[(i+1):length(corrField)],
function(x) setdiff(x, corrField[[i]]))
}
dep <- grep('departure', names(corrField))
prod(as.integer(str_split(myTicket, ",")[[1]])[unlist(corrField[dep])])
}
checkValid(test)
checkValid <- function(x){
myTicket <- x[(which(grepl("^your ticket", x)) + 1):length(x)]
nearbyTickets <- str_split_fixed(x[(which(grepl("^nearby", x)) + 1):length(x)], ",", Inf)
mode(nearbyTickets) <- "integer"
fields <- x[1:(which(grepl("^your ticket", x)) - 2)]
fields <- str_match_all(fields, "^([a-z ]+): (\\d+)-(\\d+) or (\\d+)-(\\d+)")
fields <- as.data.frame(t(sapply(fields, function(x) matrix(x[,-1], ncol = 5))))
fields[,2:5] <- lapply(fields[,2:5], as.integer)
names(fields) <- c("field","min1", "max1", "min2", "max2")
validList <- sapply(nearbyTickets, function(y) any((fields$min1 <= y & y <= fields$max1) | (fields$min2 <= y & y <= fields$max2)))
dim(validList) <- dim(nearbyTickets)
validTickets <- all_validTickets[apply(validList, 1, all),]
validFields <- apply(rules, 1, function(cur)
which(
apply(matrix(dplyr::between(validTickets,cur[2], cur[3]) | dplyr::between(validTickets, cur[4], cur[5]),
nrow = nrow(validTickets),
ncol = ncol(validTickets)),
2, all)
)
)
names(validFields) <- rules$class
ord <- names(sort(sapply(validFields, length)))
validFields <- validFields[ord]
for(i in 1:(length(validFields)-1)){
validFields[(i+1):length(validFields)] <- lapply(validFields[(i+1):length(validFields)],
function(x) setdiff(x, validFields[[i]]))
}
dep <- grep('departure', names(validFields)) # extract departure rules
prod(as.integer(str_split(myTicket, ",")[[1]])[unlist(validFields[dep])])
}
checkValid(test)
checkValid <- function(x){
myTicket <- x[(which(grepl("^your ticket", x)) + 1):length(x)]
nearbyTickets <- str_split_fixed(x[(which(grepl("^nearby", x)) + 1):length(x)], ",", Inf)
mode(nearbyTickets) <- "integer"
fields <- x[1:(which(grepl("^your ticket", x)) - 2)]
fields <- str_match_all(fields, "^([a-z ]+): (\\d+)-(\\d+) or (\\d+)-(\\d+)")
fields <- as.data.frame(t(sapply(fields, function(x) matrix(x[,-1], ncol = 5))))
fields[,2:5] <- lapply(fields[,2:5], as.integer)
names(fields) <- c("field","min1", "max1", "min2", "max2")
validList <- sapply(nearbyTickets, function(y) any((fields$min1 <= y & y <= fields$max1) | (fields$min2 <= y & y <= fields$max2)))
dim(validList) <- dim(nearbyTickets)
validTickets <- nearbyTickets[apply(validList, 1, all),]
validFields <- apply(rules, 1, function(cur)
which(
apply(matrix(dplyr::between(validTickets,cur[2], cur[3]) | dplyr::between(validTickets, cur[4], cur[5]),
nrow = nrow(validTickets),
ncol = ncol(validTickets)),
2, all)
)
)
names(validFields) <- rules$class
ord <- names(sort(sapply(validFields, length)))
validFields <- validFields[ord]
for(i in 1:(length(validFields)-1)){
validFields[(i+1):length(validFields)] <- lapply(validFields[(i+1):length(validFields)],
function(x) setdiff(x, validFields[[i]]))
}
dep <- grep('departure', names(validFields)) # extract departure rules
prod(as.integer(str_split(myTicket, ",")[[1]])[unlist(validFields[dep])])
}
checkValid(test)
checkValid <- function(x){
myTicket <- x[(which(grepl("^your ticket", x)) + 1):length(x)]
nearbyTickets <- str_split_fixed(x[(which(grepl("^nearby", x)) + 1):length(x)], ",", Inf)
mode(nearbyTickets) <- "integer"
fields <- x[1:(which(grepl("^your ticket", x)) - 2)]
fields <- str_match_all(fields, "^([a-z ]+): (\\d+)-(\\d+) or (\\d+)-(\\d+)")
fields <- as.data.frame(t(sapply(fields, function(x) matrix(x[,-1], ncol = 5))))
fields[,2:5] <- lapply(fields[,2:5], as.integer)
names(fields) <- c("field","min1", "max1", "min2", "max2")
validList <- sapply(nearbyTickets, function(y) any((fields$min1 <= y & y <= fields$max1) | (fields$min2 <= y & y <= fields$max2)))
dim(validList) <- dim(nearbyTickets)
validTickets <- nearbyTickets[apply(validList, 1, all),]
validFields <- apply(fields, 1, function(cur)
which(
apply(matrix(dplyr::between(validTickets,cur[2], cur[3]) | dplyr::between(validTickets, cur[4], cur[5]),
nrow = nrow(validTickets),
ncol = ncol(validTickets)),
2, all)
)
)
names(validFields) <- fields$class
ord <- names(sort(sapply(validFields, length)))
validFields <- validFields[ord]
for(i in 1:(length(validFields)-1)){
validFields[(i+1):length(validFields)] <- lapply(validFields[(i+1):length(validFields)],
function(x) setdiff(x, validFields[[i]]))
}
dep <- grep('departure', names(validFields)) # extract departure fields
prod(as.integer(str_split(myTicket, ",")[[1]])[unlist(validFields[dep])])
}
checkValid(test)
checkValid(test)
checkValid <- function(x){
myTicket <- x[(which(grepl("^your ticket", x)) + 1):length(x)]
nearbyTickets <- str_split_fixed(x[(which(grepl("^nearby", x)) + 1):length(x)], ",", Inf)
mode(nearbyTickets) <- "integer"
fields <- x[1:(which(grepl("^your ticket", x)) - 2)]
fields <- str_match_all(fields, "^([a-z ]+): (\\d+)-(\\d+) or (\\d+)-(\\d+)")
fields <- as.data.frame(t(sapply(fields, function(x) matrix(x[,-1], ncol = 5))))
fields[,2:5] <- lapply(fields[,2:5], as.integer)
names(fields) <- c("field","min1", "max1", "min2", "max2")
validList <- sapply(nearbyTickets, function(y) any((fields$min1 <= y & y <= fields$max1) | (fields$min2 <= y & y <= fields$max2)))
dim(validList) <- dim(nearbyTickets)
validTickets <- nearbyTickets[apply(validList, 1, all),]
validFields <- apply(fields, 1, function(cur)
which(
apply(matrix(between(validTickets,cur[2], cur[3]) | between(validTickets, cur[4], cur[5]),
nrow = nrow(validTickets),
ncol = ncol(validTickets)),
2, all)
)
)
names(validFields) <- fields$class
ord <- names(sort(sapply(validFields, length)))
validFields <- validFields[ord]
View(validFields)
for(i in 1:(length(validFields)-1)){
validFields[(i+1):length(validFields)] <- lapply(validFields[(i+1):length(validFields)],
function(x) setdiff(x, validFields[[i]]))
}
dep <- grep('departure', names(validFields))
prod(as.integer(str_split(myTicket, ",")[[1]])[unlist(validFields[dep])])
}
checkValid(test)
checkValid <- function(x){
myTicket <- x[(which(grepl("^your ticket", x)) + 1):length(x)]
nearbyTickets <- str_split_fixed(x[(which(grepl("^nearby", x)) + 1):length(x)], ",", Inf)
mode(nearbyTickets) <- "integer"
fields <- x[1:(which(grepl("^your ticket", x)) - 2)]
fields <- str_match_all(fields, "^([a-z ]+): (\\d+)-(\\d+) or (\\d+)-(\\d+)")
fields <- as.data.frame(t(sapply(fields, function(x) matrix(x[,-1], ncol = 5))))
fields[,2:5] <- lapply(fields[,2:5], as.integer)
names(fields) <- c("field","min1", "max1", "min2", "max2")
validList <- sapply(nearbyTickets, function(y) any((fields$min1 <= y & y <= fields$max1) | (fields$min2 <= y & y <= fields$max2)))
dim(validList) <- dim(nearbyTickets)
validTickets <- nearbyTickets[apply(valid, 1, all),]
candidates <- apply(fields, 1, function(row)
which(
apply(matrix(between(validTickets,row[2], row[3]) | between(validTickets, row[4], row[5]),
nrow = nrow(validTickets),
ncol = ncol(validTickets)),
2, all)
)
)
names(candidates) <- fields$class
ord <- names(sort(sapply(candidates, length)))
candidates <- candidates[ord]
for(i in 1:(length(candidates)-1)){
candidates[(i+1):length(candidates)] <- lapply(candidates[(i+1):length(candidates)],
function(x) setdiff(x, candidates[[i]]))
}
dep <- grep('departure', names(candidates))
prod(as.integer(str_split(myTicket, ",")[[1]])[unlist(candidates[dep])])
checkValid(test)
checkValid <- function(x){
myTicket <- x[(which(grepl("^your ticket", x)) + 1):length(x)]
nearbyTickets <- str_split_fixed(x[(which(grepl("^nearby", x)) + 1):length(x)], ",", Inf)
mode(nearbyTickets) <- "integer"
fields <- x[1:(which(grepl("^your ticket", x)) - 2)]
fields <- str_match_all(fields, "^([a-z ]+): (\\d+)-(\\d+) or (\\d+)-(\\d+)")
fields <- as.data.frame(t(sapply(fields, function(x) matrix(x[,-1], ncol = 5))))
fields[,2:5] <- lapply(fields[,2:5], as.integer)
names(fields) <- c("field","min1", "max1", "min2", "max2")
validList <- sapply(nearbyTickets, function(y) any((fields$min1 <= y & y <= fields$max1) | (fields$min2 <= y & y <= fields$max2)))
dim(validList) <- dim(nearbyTickets)
validTickets <- nearbyTickets[apply(valid, 1, all),]
candidates <- apply(fields, 1, function(row)
which(
apply(matrix(between(validTickets,row[2], row[3]) | between(validTickets, row[4], row[5]),
nrow = nrow(validTickets),
ncol = ncol(validTickets)),
2, all)
)
)
names(candidates) <- fields$class
ord <- names(sort(sapply(candidates, length)))
candidates <- candidates[ord]
for(i in 1:(length(candidates)-1)){
candidates[(i+1):length(candidates)] <- lapply(candidates[(i+1):length(candidates)],
function(x) setdiff(x, candidates[[i]]))
}
dep <- grep('departure', names(candidates))
prod(as.integer(str_split(myTicket, ",")[[1]])[unlist(candidates[dep])])
}
checkValid(test)
checkValid <- function(x){
myTicket <- x[(which(grepl("^your ticket", x)) + 1):length(x)]
nearbyTickets <- str_split_fixed(x[(which(grepl("^nearby", x)) + 1):length(x)], ",", Inf)
mode(nearbyTickets) <- "integer"
fields <- x[1:(which(grepl("^your ticket", x)) - 2)]
fields <- str_match_all(fields, "^([a-z ]+): (\\d+)-(\\d+) or (\\d+)-(\\d+)")
fields <- as.data.frame(t(sapply(fields, function(x) matrix(x[,-1], ncol = 5))))
fields[,2:5] <- lapply(fields[,2:5], as.integer)
names(fields) <- c("field","min1", "max1", "min2", "max2")
validList <- sapply(nearbyTickets, function(y) any((fields$min1 <= y & y <= fields$max1) | (fields$min2 <= y & y <= fields$max2)))
dim(validList) <- dim(nearbyTickets)
validTickets <- nearbyTickets[apply(validList, 1, all),]
candidates <- apply(fields, 1, function(row)
which(
apply(matrix(between(validTickets,row[2], row[3]) | between(validTickets, row[4], row[5]),
nrow = nrow(validTickets),
ncol = ncol(validTickets)),
2, all)
)
)
names(candidates) <- fields$class
ord <- names(sort(sapply(candidates, length)))
candidates <- candidates[ord]
for(i in 1:(length(candidates)-1)){
candidates[(i+1):length(candidates)] <- lapply(candidates[(i+1):length(candidates)],
function(x) setdiff(x, candidates[[i]]))
}
dep <- grep('departure', names(candidates))
prod(as.integer(str_split(myTicket, ",")[[1]])[unlist(candidates[dep])])
}
checkValid(test)
checkValid(test)
checkValid <- function(x){
myTicket <- x[(which(grepl("^your ticket", x)) + 1):length(x)]
nearbyTickets <- str_split_fixed(x[(which(grepl("^nearby", x)) + 1):length(x)], ",", Inf)
mode(nearbyTickets) <- "integer"
fields <- x[1:(which(grepl("^your ticket", x)) - 2)]
fields <- str_match_all(fields, "^([a-z ]+): (\\d+)-(\\d+) or (\\d+)-(\\d+)")
fields <- as.data.frame(t(sapply(fields, function(x) matrix(x[,-1], ncol = 5))))
fields[,2:5] <- lapply(fields[,2:5], as.integer)
names(fields) <- c("field","min1", "max1", "min2", "max2")
validList <- sapply(nearbyTickets, function(y) any((fields$min1 <= y & y <= fields$max1) | (fields$min2 <= y & y <= fields$max2)))
dim(validList) <- dim(nearbyTickets)
validTickets <- nearbyTickets[apply(validList, 1, all),]
candidates <- apply(fields, 1, function(row)
which(
apply(matrix(between(validTickets,row[2], row[3]) | between(validTickets, row[4], row[5]),
nrow = nrow(validTickets),
ncol = ncol(validTickets)),
2, all)
)
)
names(candidates) <- fields$class
ord <- names(sort(sapply(candidates, length)))
candidates <- candidates[ord]
View(candidates)
for(i in 1:(length(candidates)-1)){
candidates[(i+1):length(candidates)] <- lapply(candidates[(i+1):length(candidates)],
function(x) setdiff(x, candidates[[i]]))
}
dep <- grep('departure', names(candidates))
prod(as.integer(str_split(myTicket, ",")[[1]])[unlist(candidates[dep])])
}
checkValid(test)
checkValid <- function(x){
myTicket <- x[(which(grepl("^your ticket", x)) + 1):length(x)]
nearbyTickets <- str_split_fixed(x[(which(grepl("^nearby", x)) + 1):length(x)], ",", Inf)
mode(nearbyTickets) <- "integer"
fields <- x[1:(which(grepl("^your ticket", x)) - 2)]
fields <- str_match_all(fields, "^([a-z ]+): (\\d+)-(\\d+) or (\\d+)-(\\d+)")
fields <- as.data.frame(t(sapply(fields, function(x) matrix(x[,-1], ncol = 5))))
fields[,2:5] <- lapply(fields[,2:5], as.integer)
names(fields) <- c("field","min1", "max1", "min2", "max2")
validList <- sapply(nearbyTickets, function(y) any((fields$min1 <= y & y <= fields$max1) | (fields$min2 <= y & y <= fields$max2)))
dim(validList) <- dim(nearbyTickets)
validTickets <- nearbyTickets[apply(validList, 1, all),]
candidates <- apply(fields, 1, function(row)
which(
apply(matrix(between(validTickets,row[2], row[3]) | between(validTickets, row[4], row[5]),
nrow = nrow(validTickets),
ncol = ncol(validTickets)),
2, all)
)
)
names(candidates) <- fields$class
ord <- names(sort(sapply(candidates, length)))
candidates <- candidates[ord]
for(i in 1:(length(candidates)-1)){
candidates[(i+1):length(candidates)] <- lapply(candidates[(i+1):length(candidates)],
function(x) setdiff(x, candidates[[i]]))
}
dep <- grep('departure', names(candidates))
prod(as.integer(str_split(myTicket, ",")[[1]])[unlist(candidates[[dep]])])
}
checkValid(test)
checkValid <- function(x){
myTicket <- x[(which(grepl("^your ticket", x)) + 1):length(x)]
nearbyTickets <- str_split_fixed(x[(which(grepl("^nearby", x)) + 1):length(x)], ",", Inf)
mode(nearbyTickets) <- "integer"
fields <- x[1:(which(grepl("^your ticket", x)) - 2)]
fields <- str_match_all(fields, "^([a-z ]+): (\\d+)-(\\d+) or (\\d+)-(\\d+)")
fields <- as.data.frame(t(sapply(fields, function(x) matrix(x[,-1], ncol = 5))))
fields[,2:5] <- lapply(fields[,2:5], as.integer)
names(fields) <- c("field","min1", "max1", "min2", "max2")
validList <- sapply(nearbyTickets, function(y) any((fields$min1 <= y & y <= fields$max1) | (fields$min2 <= y & y <= fields$max2)))
dim(validList) <- dim(nearbyTickets)
validTickets <- nearbyTickets[apply(validList, 1, all),]
candidates <- apply(fields, 1, function(row)
which(
apply(matrix(between(validTickets,row[2], row[3]) | between(validTickets, row[4], row[5]),
nrow = nrow(validTickets),
ncol = ncol(validTickets)),
2, all)
)
)
names(candidates) <- fields$class
ord <- names(sort(sapply(candidates, length)))
candidates <- candidates[ord]
for(i in 1:(length(candidates)-1)){
candidates[(i+1):length(candidates)] <- lapply(candidates[(i+1):length(candidates)], function(x) setdiff(x, candidates[[i]]))
}
dep <- grep('departure', names(candidates))
prod(as.integer(str_split(myTicket, ",")[[1]])[unlist(candidates[dep])])
}
checkValid(test)
