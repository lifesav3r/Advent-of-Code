memIndex <- gregexpr("mul\\(\\K\\d+,\\d+(?=\\))", x, perl = TRUE)
memory <- regmatches(x, memIndex)[[1]]
memIndex <- as.vector(memIndex[[1]])
do <- as.vector(gregexpr("do\\(\\)", x, perl = TRUE))[[1]]
print(do)
dont <- as.vector(gregexpr("don't\\(\\)", x, perl = TRUE)[[1]])
memory <- memory %>%
strsplit(.,",") %>%
unlist() %>%
as.numeric() %>%
matrix(., ncol = 2, byrow = TRUE)
enabled <- 1
ans <- 0
for(i in sort(c(memIndex, do, dont))){
if(i %in% do){
enabled <- 1
}
else if(i %in% dont){
enabled <- 0
}
else{
j <- which(memIndex == i)
ans <- ans + enabled * (memory[j, 1] * memory[j, 2])
}
}
#print(ans)
}
memoryFix2(test)
memoryFix2 <- function(x){
memIndex <- gregexpr("mul\\(\\K\\d+,\\d+(?=\\))", x, perl = TRUE)
memory <- regmatches(x, memIndex)[[1]]
memIndex <- as.vector(memIndex[[1]])
do <- as.vector(gregexpr("do\\(\\)", x, perl = TRUE))[[1]]
dont <- as.vector(gregexpr("don't\\(\\)", x, perl = TRUE))[[1]]
memory <- memory %>%
strsplit(.,",") %>%
unlist() %>%
as.numeric() %>%
matrix(., ncol = 2, byrow = TRUE)
enabled <- 1
ans <- 0
for(i in sort(c(memIndex, do, dont))){
if(i %in% do){
enabled <- 1
}
else if(i %in% dont){
enabled <- 0
}
else{
j <- which(memIndex == i)
ans <- ans + enabled * (memory[j, 1] * memory[j, 2])
}
}
print(ans)
}
memoryFix2(test)
memoryFix2 <- function(x){
memIndex <- gregexpr("mul\\(\\K\\d+,\\d+(?=\\))", x, perl = TRUE)
memory <- regmatches(x, memIndex)[[1]]
memIndex <- as.vector(memIndex[[1]])
do <- as.vector(gregexpr("do\\(\\)", x, perl = TRUE)[1])
dont <- as.vector(gregexpr("don't\\(\\)", x, perl = TRUE)[1])
memory <- memory %>%
strsplit(.,",") %>%
unlist() %>%
as.numeric() %>%
matrix(., ncol = 2, byrow = TRUE)
enabled <- 1
ans <- 0
for(i in sort(c(memIndex, do, dont))){
if(i %in% do){
enabled <- 1
}
else if(i %in% dont){
enabled <- 0
}
else{
j <- which(memIndex == i)
ans <- ans + enabled * (memory[j, 1] * memory[j, 2])
}
}
print(ans)
}
memoryFix2(test)
memoryFix2 <- function(x){
memIndex <- gregexpr("mul\\(\\K\\d+,\\d+(?=\\))", x, perl = TRUE)
memory <- regmatches(x, memIndex)[[1]]
memIndex <- as.vector(memIndex[[1]])
do <- as.vector(gregexpr("do\\(\\)", x, perl = TRUE)[[1]])
dont <- as.vector(gregexpr("don't\\(\\)", x, perl = TRUE)[[1]])
memory <- memory %>%
strsplit(.,",") %>%
unlist() %>%
as.numeric() %>%
matrix(., ncol = 2, byrow = TRUE)
enabled <- 1
ans <- 0
for(i in sort(c(memIndex, do, dont))){
if(i %in% do){
enabled <- 1
}
else if(i %in% dont){
enabled <- 0
}
else{
j <- which(memIndex == i)
ans <- ans + enabled * (memory[j, 1] * memory[j, 2])
}
}
print(ans)
}
memoryFix2(test)
memIndex <- gregexpr("mul\\(\\K\\d+,\\d+(?=\\))", test, perl = TRUE)
memory <- regmatches(test, memIndex)[[1]]
memIndex <- as.vector(memIndex[[1]])
do <- as.vector(gregexpr("do\\(\\)", x, perl = TRUE)[[1]])
do <- as.vector(gregexpr("do\\(\\)", test, perl = TRUE)[[1]])
dont <- as.vector(gregexpr("don't\\(\\)", test, perl = TRUE)[[1]])
memory <- memory %>%
strsplit(.,",") %>%
unlist() %>%
as.numeric() %>%
matrix(., ncol = 2, byrow = TRUE)
enabled <- 1
ans <- 0
for(i in sort(c(memIndex, do, dont))){
if(i %in% do){
enabled <- 1
}
else if(i %in% dont){
enabled <- 0
}
else{
j <- which(memIndex == i)
ans <- ans + enabled * (memory[j, 1] * memory[j, 2])
}
}
library(dplyr);
test <- readLines("test.txt");
input <- readLines("input.txt");
#Part 1
memoryFix <- function(x){
memory <- regmatches(x, gregexpr("mul\\(\\K\\d+,\\d+(?=\\))", x, perl = TRUE))[[1]]
memory <- memory %>%
strsplit(.,",") %>%
unlist() %>%
as.numeric() %>%
matrix(., ncol = 2, byrow = TRUE)
ans <- sum(memory[,1] * memory[,2])
print(ans)
}
#Part 2
memoryFix2 <- function(x){
memIndex <- gregexpr("mul\\(\\K\\d+,\\d+(?=\\))", x, perl = TRUE)
memory <- regmatches(x, memIndex)[[1]]
memIndex <- as.vector(memIndex[[1]])
do <- as.vector(gregexpr("do\\(\\)", x, perl = TRUE)[[1]])
dont <- as.vector(gregexpr("don't\\(\\)", x, perl = TRUE)[[1]])
memory <- memory %>%
strsplit(.,",") %>%
unlist() %>%
as.numeric() %>%
matrix(., ncol = 2, byrow = TRUE)
enabled <- 1
ans <- 0
for(i in sort(c(memIndex, do, dont))){
if(i %in% do){
enabled <- 1
}
else if(i %in% dont){
enabled <- 0
}
else{
j <- which(memIndex == i)
ans <- ans + enabled * (memory[j, 1] * memory[j, 2])
}
}
print(ans)
}
memoryFix2(test)
?gregexpr
memoryFix2 <- function(x){
memIndex <- gregexpr("mul\\(\\K\\d+,\\d+(?=\\))", x, perl = TRUE)
memory <- regmatches(x, memIndex)[[1]]
memIndex <- as.vector(memIndex[[1]])
do <- gregexpr("do\\(\\)", x, perl = TRUE
print(do)
memoryFix2(test)
memoryFix2 <- function(x){
memIndex <- gregexpr("mul\\(\\K\\d+,\\d+(?=\\))", x, perl = TRUE)
memory <- regmatches(x, memIndex)[[1]]
memIndex <- as.vector(memIndex[[1]])
do <- gregexpr("do\\(\\)", x, perl = TRUE)
print(do)
dont <- as.vector(gregexpr("don't\\(\\)", x, perl = TRUE)[[1]])
memory <- memory %>%
strsplit(.,",") %>%
unlist() %>%
as.numeric() %>%
matrix(., ncol = 2, byrow = TRUE)
enabled <- 1
ans <- 0
for(i in sort(c(memIndex, do, dont))){
if(i %in% do){
enabled <- 1
}
else if(i %in% dont){
enabled <- 0
}
else{
j <- which(memIndex == i)
ans <- ans + enabled * (memory[j, 1] * memory[j, 2])
}
}
#print(ans)
}
memoryFix2(test)
#Part 2
memoryFix2 <- function(x){
#memIndex <- gregexpr("mul\\(\\K\\d+,\\d+(?=\\))", x, perl = TRUE)
#memory <- regmatches(x, memIndex)[[1]]
#memIndex <- as.vector(memIndex[[1]])
do <- as.vector(gregexpr("do\\(\\)", x, perl = TRUE)[[1]])
print(do)
dont <- as.vector(gregexpr("don't\\(\\)", x, perl = TRUE)[[1]])
memory <- memory %>%
strsplit(.,",") %>%
unlist() %>%
as.numeric() %>%
matrix(., ncol = 2, byrow = TRUE)
enabled <- 1
ans <- 0
for(i in sort(c(memIndex, do, dont))){
if(i %in% do){
enabled <- 1
}
else if(i %in% dont){
enabled <- 0
}
else{
j <- which(memIndex == i)
ans <- ans + enabled * (memory[j, 1] * memory[j, 2])
}
}
#print(ans)
}
memoryFix2(test)
library(dplyr)
memoryFix2 <- function(x){
memIndex <- gregexpr("mul\\(\\K\\d+,\\d+(?=\\))", x, perl = TRUE)
memory <- regmatches(x, memIndex)[[1]]
memIndex <- as.vector(memIndex[[1]])
do <- as.vector(gregexpr("do\\(\\)", x, perl = TRUE)[[1]])
dont <- as.vector(gregexpr("don't\\(\\)", x, perl = TRUE)[[1]])
memory <- memory %>%
strsplit(.,",") %>%
unlist() %>%
as.numeric() %>%
matrix(., ncol = 2, byrow = TRUE)
enabled <- 1
ans <- 0
for(i in sort(c(memIndex, do, dont))){
if(i %in% do){
enabled <- 1
}
else if(i %in% dont){
enabled <- 0
}
else{
j <- which(memIndex == i)
ans <- ans + enabled * (memory[j, 1] * memory[j, 2])
}
}
print(ans)
}
memoryFix2(test)
memoryFix2 <- function(x){
memIndex <- gregexpr("mul\\(\\K\\d+,\\d+(?=\\))", x, perl = TRUE)
memory <- regmatches(x, memIndex)[[1]]
memIndex <- as.vector(memIndex[[1]])
do <- as.vector(regmatches("do\\(\\)", x, perl = TRUE)[[1]])
print(do)
dont <- as.vector(gregexpr("don't\\(\\)", x, perl = TRUE)[[1]])
memory <- memory %>%
strsplit(.,",") %>%
unlist() %>%
as.numeric() %>%
matrix(., ncol = 2, byrow = TRUE)
enabled <- 1
ans <- 0
for(i in sort(c(memIndex, do, dont))){
if(i %in% do){
enabled <- 1
}
else if(i %in% dont){
enabled <- 0
}
else{
j <- which(memIndex == i)
ans <- ans + enabled * (memory[j, 1] * memory[j, 2])
}
}
print(ans)
}
memoryFix2(test)
memoryFix2 <- function(x){
memIndex <- gregexpr("mul\\(\\K\\d+,\\d+(?=\\))", x, perl = TRUE)
memory <- regmatches(x, memIndex)[[1]]
memIndex <- as.vector(memIndex[[1]])
do <- gregexpr("do\\(\\)", x, perl = TRUE)
do <- as.vector(do[[1]])
print(do)
dont <- as.vector(gregexpr("don't\\(\\)", x, perl = TRUE)[[1]])
memory <- memory %>%
strsplit(.,",") %>%
unlist() %>%
as.numeric() %>%
matrix(., ncol = 2, byrow = TRUE)
enabled <- 1
ans <- 0
for(i in sort(c(memIndex, do, dont))){
if(i %in% do){
enabled <- 1
}
else if(i %in% dont){
enabled <- 0
}
else{
j <- which(memIndex == i)
ans <- ans + enabled * (memory[j, 1] * memory[j, 2])
}
}
print(ans)
}
memoryFix2(test)
library(dplyr)
input_filename <- "input.txt"
input <- readLines(input_filename)
mul_inds <- gregexpr("mul\\(\\K\\d+,\\d+(?=\\))", input, perl = TRUE)
muls <- regmatches(input, mul_inds)[[1]]
mul_inds <- as.vector(mul_inds[[1]])
dos <- as.vector(gregexpr("do\\(\\)", input, perl = TRUE)[[1]])
donts <- as.vector(gregexpr("don't\\(\\)", input, perl = TRUE)[[1]])
muls <- muls %>%
strsplit(., ",") %>%
unlist() %>%
as.numeric() %>%
matrix(., ncol = 2, byrow = TRUE)
pt1_mul_sum <- sum(muls[, 1] * muls[, 2])
print(pt1_mul_sum)
current_instruction <- 1
pt2_mul_sum <- 0
for (i in sort(c(mul_inds, dos, donts))) {
if (i %in% dos) {
current_instruction <- 1
} else if (i %in% donts) {
current_instruction <- 0
} else {
j <- which(mul_inds == i)
pt2_mul_sum <- pt2_mul_sum + current_instruction * (muls[j, 1] * muls[j, 2])
}
}
print(pt2_mul_sum)
library(dplyr)
input_filename <- "test.txt"
input <- readLines(input_filename)
mul_inds <- gregexpr("mul\\(\\K\\d+,\\d+(?=\\))", input, perl = TRUE)
muls <- regmatches(input, mul_inds)[[1]]
mul_inds <- as.vector(mul_inds[[1]])
dos <- as.vector(gregexpr("do\\(\\)", input, perl = TRUE)[[1]])
donts <- as.vector(gregexpr("don't\\(\\)", input, perl = TRUE)[[1]])
muls <- muls %>%
strsplit(., ",") %>%
unlist() %>%
as.numeric() %>%
matrix(., ncol = 2, byrow = TRUE)
pt1_mul_sum <- sum(muls[, 1] * muls[, 2])
print(pt1_mul_sum)
current_instruction <- 1
pt2_mul_sum <- 0
for (i in sort(c(mul_inds, dos, donts))) {
if (i %in% dos) {
current_instruction <- 1
} else if (i %in% donts) {
current_instruction <- 0
} else {
j <- which(mul_inds == i)
pt2_mul_sum <- pt2_mul_sum + current_instruction * (muls[j, 1] * muls[j, 2])
}
}
print(pt2_mul_sum)
library(dplyr)
input_filename <- "input.txt"
input <- readLines(input_filename)
mul_inds <- gregexpr("mul\\(\\K\\d+,\\d+(?=\\))", input, perl = TRUE)
muls <- regmatches(input, mul_inds)[[1]]
mul_inds <- as.vector(mul_inds[[1]])
dos <- as.vector(gregexpr("do\\(\\)", input, perl = TRUE)[[1]])
donts <- as.vector(gregexpr("don't\\(\\)", input, perl = TRUE)[[1]])
muls <- muls %>%
strsplit(., ",") %>%
unlist() %>%
as.numeric() %>%
matrix(., ncol = 2, byrow = TRUE)
pt1_mul_sum <- sum(muls[, 1] * muls[, 2])
print(pt1_mul_sum)
current_instruction <- 1
pt2_mul_sum <- 0
for (i in sort(c(mul_inds, dos, donts))) {
if (i %in% dos) {
current_instruction <- 1
} else if (i %in% donts) {
current_instruction <- 0
} else {
j <- which(mul_inds == i)
pt2_mul_sum <- pt2_mul_sum + current_instruction * (muls[j, 1] * muls[j, 2])
}
}
print(pt2_mul_sum)
memoryFix2 <- function(x){
memIndex <- gregexpr("mul\\(\\K\\d+,\\d+(?=\\))", x, perl = TRUE)
memory <- regmatches(x, memIndex)[[1]]
memIndex <- as.vector(memIndex[[1]])
do <- as.vector(gregexpr("do\\(\\)", x, perl = TRUE)[[1]])
dont <- as.vector(gregexpr("don't\\(\\)", x, perl = TRUE)[[1]])
memory <- memory %>%
strsplit(.,",") %>%
unlist() %>%
as.numeric() %>%
matrix(., ncol = 2, byrow = TRUE)
enabled <- 1
ans <- 0
for(i in sort(c(memIndex, do, dont))){
if(i %in% do){
enabled <- 1
}
else if(i %in% dont){
enabled <- 0
}
else{
j <- which(memIndex == i)
ans <- ans + enabled * (memory[j, 1] * memory[j, 2])
}
}
print(ans)
}
memoryFix2(input)
memoryFix2(test)
setwd("M:/Advent of Code/Advent-of-Code/2024/Day 4 - Ceres Search")
test <- as.matrix(read.fwf(file = "test.txt", widths = rep(1,10)));
input <- as.matrix(read.fwf(file = "input.txt", widths = rep(1, 140)));
View(test)
test <- as.matrix(read.fwf(file = "test.txt", widths = rep(1,10)));
input <- as.matrix(read.fwf(file = "input.txt", widths = rep(1, 140)));
wordTable <- function(x, y){
data.table(which(y == x, arr.ind = TRUE))[, let(up = row-1, right = col+1, down = row+1, left = col-1)]
}
wordTable <- lapply(c("X", "M", "A", "S"), wordTable, input);
?data.table
??data.table
install.packages("data.table")
library(data.table)
test <- as.matrix(read.fwf(file = "test.txt", widths = rep(1,10)));
input <- as.matrix(read.fwf(file = "input.txt", widths = rep(1, 140)));
wordTable <- function(x, y){
data.table(which(y == x, arr.ind = TRUE))[, let(up = row-1, right = col+1, down = row+1, left = col-1)]
}
wordTable <- lapply(c("X", "M", "A", "S"), wordTable, input);
wordSearch <- function(x, y, addX = TRUE){
updown <- fcase(y %like% "up", "up", y %like% "down", "down", default = "row")
leftright <- fcase(y %like% "left", "left", y %like% "right", "right", default = "col")
res <- x[[1]][, .(row = get(updown), col = get(leftright))][
x[[2]], on = .(row, col), .(row = get(updown),
col = get(leftright), ar = row, ac = col), nomatch = NULL][
x[[3]], on = .(row, col), .(row = get(updown),
col = get(leftright), ar, ac), nomatch = NULL]
if(addX){
res[x[[4]], on = .(row, col), .(row = get(updown), col = get(leftright), ar, ac), nomatch = NULL]
} else res
}
View(wordTable)
rbindlist(lapply(c("up", "upright", "right", "downright", "downleft", "left", "upleft"), wordSearch, x = wordTable))[, .up]
wordTabler <- function(x, y){
data.table(which(y == x, arr.ind = T))[,
let(N = row-1, E = col+1, S = row+1, W = col-1)]
}
wordTable <- lapply(c("X", "M", "A", "S"), wordTable, wordmat)
wordTabler <- function(x, y){
data.table(which(y == x, arr.ind = T))[,
let(N = row-1, E = col+1, S = row+1, W = col-1)]
}
wordTable <- lapply(c("X", "M", "A", "S"), wordTabler, test)
find <- function(x, y, addX = TRUE) {
ns <- fcase(y %like% "N", "N", y %like% "S", "S", default = "row")
ew <- fcase(y %like% "E", "E", y %like% "W", "W", default = "col")
res <- x[[1]][, .(row = get(ns), col = get(ew))][
x[[2]], on = .(row, col), .(row = get(ns),
col = get(ew), ar = row, ac = col), nomatch = NULL][
x[[3]], on = .(row, col), .(row = get(ns),
col = get(ew), ar, ac), nomatch = NULL]
if (addX) {
res[x[[4]], on = .(row, col), .(row = get(ns),
col = get(ew), ar, ac), nomatch = NULL]
} else res
}
rbindlist(lapply( c("N", "NE", "E", "SE", "S", "SW", "W", "NW"), find, x = wordTabler))[, .N]
rbindlist(lapply( c("N", "NE", "E", "SE", "S", "SW", "W", "NW"), find, x = wordTabler))[, .N]
rbindlist(lapply( c("N", "NE", "E", "SE", "S", "SW", "W", "NW"), find, x = wordTable))[, .N]
wordTable <- lapply(c("X", "M", "A", "S"), wordTabler, input);
rbindlist(lapply( c("N", "NE", "E", "SE", "S", "SW", "W", "NW"), find, x = wordTable))[, .N]
MASTable <- rbindlist(lapply(c("NE", "SE", "SW", "NW"), find, x = wordTable[2:4], addX = F), idcol = T);
MASTable[MASTable, on = .(ar, ac)][.id != i..id][, .N/2];
